import { ScriptName } from "$lib/types/script";
import { boolean, index, integer, pgEnum, pgTable, primaryKey, real, serial, text, timestamp, unique, varchar, type PgEnum } from "drizzle-orm/pg-core";

export const album = pgTable("album", {
  id: integer("id").primaryKey().notNull(),
  artpath: varchar("artpath"),
  added: real("added").notNull(),
  albumartist: varchar("albumartist").notNull(),
  albumartist_sort: varchar("albumartist_sort").notNull(),
  albumartist_credit: varchar("albumartist_credit").notNull(),
  name: varchar("name").notNull(),
  genre: varchar("genre").notNull(),
  year: integer("year").notNull(),
  month: integer("month").notNull(),
  day: integer("day").notNull(),
  disctotal: integer("disctotal").notNull(),
  comp: integer("comp").notNull(),
  mb_albumid: varchar("mb_albumid").notNull(),
  mb_albumartistid: varchar("mb_albumartistid").notNull(),
  albumtype: varchar("albumtype").notNull(),
  label: varchar("label").notNull(),
  mb_releasegroupid: varchar("mb_releasegroupid").notNull(),
  asin: varchar("asin").notNull(),
  catalognum: varchar("catalognum").notNull(),
  script: varchar("script").notNull(),
  language: varchar("language").notNull(),
  country: varchar("country").notNull(),
  albumstatus: varchar("albumstatus").notNull(),
  albumdisambig: varchar("albumdisambig").notNull(),
  releasegroupdisambig: varchar("releasegroupdisambig").notNull(),
  rg_album_gain: real("rg_album_gain"),
  rg_album_peak: real("rg_album_peak"),
  r128_album_gain: real("r128_album_gain"),
  original_year: integer("original_year").notNull(),
  original_month: integer("original_month").notNull(),
  original_day: integer("original_day").notNull(),
  style: varchar("style"),
  discogs_albumid: integer("discogs_albumid"),
  discogs_artistid: integer("discogs_artistid"),
  discogs_labelid: integer("discogs_labelid"),
  albumtypes: varchar("albumtypes"),
  deleted: boolean("deleted").default(false),
});

export const track = pgTable("track", {
  path: varchar("path"),
  id: integer("id").primaryKey().notNull(),
  album_id: integer("album_id").references(() => album.id),
  year: integer("year").notNull(),
  month: integer("month").notNull(),
  day: integer("day").notNull(),
  trackindex: integer("trackindex").notNull(),
  tracktotal: integer("tracktotal").notNull(),
  disc: integer("disc").notNull(),
  disctotal: integer("disctotal").notNull(),
  bpm: integer("bpm"),
  comp: integer("comp").notNull(),
  r128_track_gain: integer("r128_track_gain"),
  r128_album_gain: integer("r128_album_gain"),
  original_year: integer("original_year").notNull(),
  original_month: integer("original_month").notNull(),
  original_day: integer("original_day").notNull(),
  bitrate: integer("bitrate").notNull(),
  samplerate: integer("samplerate").notNull(),
  bitdepth: integer("bitdepth").notNull(),
  channels: integer("channels").notNull(),
  discogs_albumid: integer("discogs_albumid"),
  discogs_artistid: integer("discogs_artistid"),
  discogs_labelid: integer("discogs_labelid"),
  rg_track_gain: real("rg_track_gain"),
  rg_track_peak: real("rg_track_peak"),
  rg_album_gain: real("rg_album_gain"),
  rg_album_peak: real("rg_album_peak"),
  length: real("length").notNull(),
  mtime: real("mtime").notNull(),
  added: real("added").notNull(),
  title: varchar("title").notNull(),
  artist: varchar("artist").notNull(),
  artist_sort: varchar("artist_sort").notNull(),
  artist_credit: varchar("artist_credit").notNull(),
  albumname: varchar("albumname").notNull(),
  albumartist: varchar("albumartist").notNull(),
  albumartist_sort: varchar("albumartist_sort").notNull(),
  albumartist_credit: varchar("albumartist_credit").notNull(),
  genre: varchar("genre").notNull(),
  lyricist: varchar("lyricist").notNull(),
  composer: varchar("composer").notNull(),
  composer_sort: varchar("composer_sort").notNull(),
  arranger: varchar("arranger").notNull(),
  grouping: varchar("grouping").notNull(),
  lyrics: varchar("lyrics").notNull(),
  comments: varchar("comments").notNull(),
  mb_trackid: varchar("mb_trackid"),
  mb_albumid: varchar("mb_albumid"),
  mb_artistid: varchar("mb_artistid"),
  mb_albumartistid: varchar("mb_albumartistid"),
  mb_releasetrackid: varchar("mb_releasetrackid"),
  albumtype: varchar("albumtype").notNull(),
  label: varchar("label").notNull(),
  acoustid_fingerprint: varchar("acoustid_fingerprint"),
  acoustid_id: varchar("acoustid_id"),
  mb_releasegroupid: varchar("mb_releasegroupid").notNull(),
  asin: varchar("asin").notNull(),
  catalognum: varchar("catalognum").notNull(),
  script: varchar("script").notNull(),
  language: varchar("language").notNull(),
  country: varchar("country").notNull(),
  albumstatus: varchar("albumstatus").notNull(),
  media: varchar("media").notNull(),
  albumdisambig: varchar("albumdisambig").notNull(),
  releasegroupdisambig: varchar("releasegroupdisambig").notNull(),
  disctitle: varchar("disctitle").notNull(),
  encoder: varchar("encoder").notNull(),
  initial_key: varchar("initial_key"),
  format: varchar("format").notNull(),
  style: varchar("style"),
  work: varchar("work"),
  mb_workid: varchar("mb_workid"),
  work_disambig: varchar("work_disambig"),
  trackdisambig: varchar("trackdisambig"),
  albumtypes: varchar("albumtypes"),
  isrc: varchar("isrc"),
  deleted: boolean("deleted").default(false),
}, (table) => {
  return {
    titleIdx: index("title_idx").on(table.title),
    addedIdx: index("added_idx").on(table.added),
  }
});

export const playlistTypeEnum = pgEnum("playlist_type_enum", ['default', 'syncthing'])

export const playlist = pgTable("playlist", {
  id: serial("id").primaryKey().notNull(),
  name: varchar("name").notNull(),
  type: playlistTypeEnum("type").default('default').notNull(),
});

export const playlist_tracks = pgTable("playlist_tracks", {
  playlist_id: integer("playlist_id").notNull().references(() => playlist.id, { onDelete: "cascade" }),
  track_id: integer("track_id").notNull().references(() => track.id, { onDelete: "cascade" }),
  track_position: integer("track_position").notNull()
},
(table) => {
  return {
    pk: primaryKey({ columns: [table.playlist_id, table.track_id, table.track_position] }),
    unique_track_position_per_playlist: unique('unique_track_position_per_playlist').on(table.playlist_id, table.track_position)
  }
});

export const scriptName: PgEnum<[ScriptName]> = pgEnum("script_name", [ScriptName.BeetsImport])

export const scriptSource = pgEnum("script_execution_source", ['cron', 'manual'])

export const script = pgTable("scripts", {
  id: serial("id").primaryKey().notNull(),
  name: scriptName("name").notNull(),
  startTime: timestamp('startTime').notNull(),
  endTime: timestamp('endTime'),
  done: boolean('done').default(false).notNull(),
  success: boolean('success'),
  logs: text('logs'),
  source: scriptSource('source').notNull(),
});
