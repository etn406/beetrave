import { Injectable } from '@nestjs/common';
import * as fs from 'fs/promises';
import * as path from 'path';
import { BeetItem } from 'src/beet-item/entities/beet-item.entity';
import { BEETS_LIBRARY_ROOT, SYNCTHING_STIGNORE_FILE_NAME } from 'src/env-vars';

type BeetItemPathLine = Pick<BeetItem, 'id' | 'path'>;

const STIGNORE_FILE_PATH = path.join(BEETS_LIBRARY_ROOT, SYNCTHING_STIGNORE_FILE_NAME);

// Example of a line :
// !/path/to/file.mp3 #:123
const STIGNORE_BEET_ITEM_LINE_FORMAT: RegExp = /^!(.+) #:(\d+)$/;

@Injectable()
export class SyncthingService {
  private lastUpdate = 0;
  private lines: BeetItemPathLine[] = [];

  constructor() { }

  async readSyncthingFile(): Promise<BeetItemPathLine[]> {
    try {

      console.info(`Reading the Syncthing file ${STIGNORE_FILE_PATH}...`)

      this.lines = await fs.readFile(STIGNORE_FILE_PATH)
        .toString()
        .split('\n')
        .map(line => line.match(STIGNORE_BEET_ITEM_LINE_FORMAT))
        .filter(line => Array.isArray(line) && line[1] && Number.isInteger(line[2]))
        .map(([, path, id]) => ({
          id: Number.parseInt(id),
          path: Buffer.from(this.unescapeSyncthingIgnorePath(path))
        }));

      console.info(`Loaded ${this.lines.length} paths from the Syncthing file.`);

    } catch (e) {
      console.warn(`Couldn't read the Syncthing file!`);
      this.lines = [];
    }

    return this.lines;
  }

  unescapeSyncthingIgnorePath(escapedPath: string): string {
    return escapedPath;
  }

  escapeSyncthingPath(path: Buffer): string {
    return path.toString();
  }

  async writeSyncthingFile() {
    try {
      await fs.writeFile(STIGNORE_FILE_PATH, [
        '### AUTOGENERATED FILE - DO NOT EDIT ###',
        '*',
        ...this.lines.map(({ id, path }) =>
          `!${this.escapeSyncthingPath(path)} #:${id}`)
      ]);
    } catch (e) {
      console.error(`Couldn't write the Syncthing file with ${this.lines.length} lines: `, e);
      throw e;
    }
  }
}
